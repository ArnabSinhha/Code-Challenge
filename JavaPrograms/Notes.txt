1. What is the difference between interface and abstract
Ans : In Java, an abstract class can have both abstract and concrete methods, allowing partial implementation, and it can maintain state through instance variables. It supports single inheritance.

 Conversely, an interface can only declare abstract methods (until Java 8, which introduced default and static methods) and constants, enforcing complete abstraction. Interfaces allow a class to implement multiple interfaces, promoting multiple inheritance. While abstract classes are used for closely related classes sharing code, interfaces define a contract for disparate classes to implement. 
 
 
 Abstract classes can have constructors and member variables, whereas interfaces cannot, except for static and default methods.


2. Can we use System.out.println directly inside a class body ?
Ans: No, you cannot use System.out.println directly inside a class body in Java. Statements like System.out.println must be placed inside a method, constructor, initializer block, or static initializer block.

Example 
public class Main {
    public static void main(String[] args) {
        new Outer();
        Outer.printStaticMessage();
    }
}

class Outer {
    // Instance initializer block
    {
        System.out.println("Inside an instance initializer block");
    }

    // Static initializer block
    static {
        System.out.println("Inside a static initializer block");
    }

    // Constructor
    Outer() {
        System.out.println("Inside a constructor");
    }

    // Instance method
    void printMessage() {
        System.out.println("Inside an instance method");
    }

    // Static method
    static void printStaticMessage() {
        System.out.println("Inside a static method");
    }
}
